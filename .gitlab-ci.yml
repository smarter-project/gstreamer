variables:
  CI_BUILD_IMAGE: "registry.gitlab.com/ericvh/docker-buildx-qemu"
  CI_BUILDX_ARCHS: "linux/amd64,linux/arm64"
  CI_DEFAULT_BRANCH: "main"
  H264_GSTREAMER_PIPELINE_RPI: "queue ! omxh264enc target-bitrate=1000000 control-rate=1 ! video/x-h264,profile=(string)high,level=(string)4 "
  H264_GSTREAMER_PIPELINE_JETSON: "nvvidconv ! video/x-raw(memory:NVMM),format=NV12,width=640,height=480 ! queue ! nvv4l2h264enc maxperf-enable=1 bitrate=8000000 "


.build:
  image: $CI_BUILD_IMAGE
  stage: build
  services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    # See https://github.com/docker-library/docker/pull/166
    DOCKER_TLS_CERTDIR: ""
  retry: 2
  before_script:
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
      else
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
      fi
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY

.buildx_setup: &buildx_setup
  # Use docker-container driver to allow useful features (push/multi-platform)
  - update-binfmts --enable # Important: Ensures execution of other binary formats is enabled in the kernel
  - docker buildx create --driver docker-container --use
  - docker buildx inspect --bootstrap
  - docker buildx ls

build:buildx-main:
  extends: .build
  only: 
    refs:
      - $CI_DEFAULT_BRANCH
    variables:
      - $CI_BUILDX_ARCHS
  script:
    - *buildx_setup
    - docker buildx build --platform $CI_BUILDX_ARCHS --progress plain --pull -t "$CI_REGISTRY_IMAGE" --push .

build:buildx-main-jetson:
  extends: .build
  only: 
    refs:
      - $CI_DEFAULT_BRANCH
  script:
    - *buildx_setup
    - docker buildx build --build-arg BASE_IMAGE=nvcr.io/nvidia/l4t-base:r32.7.2 --build-arg H264_GSTREAMER_PIPELINE=${H264_GSTREAMER_PIPELINE_JETSON} --progress plain --pull -t ${CI_REGISTRY_IMAGE}-jetson --push .

build:buildx-main-rpi:
  extends: .build
  only: 
    refs:
      - $CI_DEFAULT_BRANCH
  script:
    - *buildx_setup
    - docker buildx build --build-arg BASE_IMAGE=raspbian/stretch:041518 --build-arg H264_GSTREAMER_PIPELINE=${H264_GSTREAMER_PIPELINE_RPI} --progress plain --pull -t ${CI_REGISTRY_IMAGE}-rpi --push .

build:buildx:
  extends: .build
  only:
    variables:
      - $CI_BUILDX_ARCHS
  except:
    refs:
       - $CI_DEFAULT_BRANCH
  script:
    - *buildx_setup
    - docker buildx build --platform $CI_BUILDX_ARCHS --progress plain --pull -t "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" .

build:buildx-jetson:
  extends: .build
  except:
    refs:
       - $CI_DEFAULT_BRANCH
  script:
    - *buildx_setup
    - docker buildx build --build-arg BASE_IMAGE=nvcr.io/nvidia/l4t-base:r32.7.2 --build-arg H264_GSTREAMER_PIPELINE=${H264_GSTREAMER_PIPELINE_JETSON} --progress plain --pull -t ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}-jetson .

build:buildx-rpi:
  extends: .build
  except:
    refs:
       - $CI_DEFAULT_BRANCH
  script:
    - *buildx_setup
    - docker buildx build --build-arg BASE_IMAGE=raspbian/stretch:041518 --build-arg H264_GSTREAMER_PIPELINE=${H264_GSTREAMER_PIPELINE_RPI} --progress plain --pull -t ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}-rpi .
