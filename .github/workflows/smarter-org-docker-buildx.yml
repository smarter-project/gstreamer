name: Docker Image BuildX CI and Publish

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: "19 16 * * *"
  push:
    branches: ["main"]
    # Publish semver tags as releases.
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@f3c664df7af409cb4873aa5068053ba9d61a57b6 #v2.6.0
        with:
          cosign-release: "v1.13.1"

      - # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@b2391d37b4157fa4aa2e118d643f417910ff3242 #v3.8.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Extract metadata (tags, labels) for Docker Jetson
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata Jetson
        id: meta-jetson
        uses: docker/metadata-action@b2391d37b4157fa4aa2e118d643f417910ff3242 #v3.8.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            suffix=-jetson,onlatest=true

      # Extract metadata (tags, labels) for Docker Rpi
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata Rpi
        id: meta-rpi
        uses: docker/metadata-action@b2391d37b4157fa4aa2e118d643f417910ff3242 #v3.8.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            suffix=-rpi,onlatest=true

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2.2.1
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker default image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push Docker image with Buildx for Jetson (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image Jetson
        id: build-and-push-jetson
        uses: docker/build-push-action@v3
        with:
          platforms: linux/arm64
          context: .
          build-args: |
            BASE_IMAGE=nvcr.io/nvidia/l4t-base:r32.7.1
            H264_GSTREAMER_PIPELINE="nvvidconv ! video/x-raw(memory:NVMM),format=NV12,width=640,height=480 ! queue ! nvv4l2h264enc maxperf-enable=1 bitrate=8000000 "
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-jetson.outputs.tags }}
          labels: ${{ steps.meta-jetson.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push Docker image with Buildx for Rpi (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image Rpi
        id: build-and-push-rpi
        uses: docker/build-push-action@v3
        with:
          platforms: linux/arm/v7
          context: .
          build-args: |
            BASE_IMAGE=balenalib/raspberry-pi:buster-20220112
            H264_GSTREAMER_PIPELINE="queue ! omxh264enc target-bitrate=1000000 control-rate=1 ! video/x-h264,profile=(string)high,level=(string)4 "
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-rpi.outputs.tags }}
          labels: ${{ steps.meta-rpi.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: |
          echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
          echo "${{ steps.meta-jetson.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push-jetson.outputs.digest }}
          echo "${{ steps.meta-rpi.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push-rpi.outputs.digest }}
